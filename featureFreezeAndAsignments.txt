This file contain a list of ideas that will be implemented for the next releases of I4J.

Additonally we can annotate if any of the feautures is actually being implemented by any of the developers.


For the next release:

- Element iterators in properties (and properties in drivers? and drivers in connections?)
- Avoid of api exposures (returned some ArrayList<> when List<> would be better)
- Check the exception mechanism. Some exception may become a runtime exception to avoid try {}catch block in the drivers which make the code quite ugly. Do not directly make INDIException as a runtime one. Maybe a subclass.
- getting maven-release to work with central -> ritchie
- URL handling for connections: indi://[host]:[port][/device[/property[/element]]]  -> Zerjillo
- extract the guider stuff from the ccd and telescope and store it for later discussion
- use the license-plugin to write the class header? -> to diskuss 
- check dokumentation of every method/class.
- Extract Client examples to their own Maven Module -> Zerjillo will try to do it. Good way to learn a little about Maven :-P
- Check old tutorials and adapt them to the new features. Create new examples if necessary.



For future releases:

- Server library: allow driver renaming for multiple equal devices (with the same driver)
- Server library: Check listeners mechanism. Not sure if some error may occur when iterating over the lists.- Server library: Check if drivers are really distroyed to avoid active threads. 
- Finishing refactorings for CCD and Telescope -> ritchie
- Selecting a logger framework and introduce it every where
- useing the serviceloader for driver detection? -> to diskuss
- Generics in elements (value)? -> to diskuss

DONE:

- Base directory stuff ( ~/.i4j/ ) 
- Generics in INDIProperty to help INDISwitchProperty only having INDISwitchElement as elements. Check for other types of Properties. Much less castings would be needed.->ritchie
- Package renaming: laazotea.blabla -> org.indilib.i4j.xxx -> zerjillo
- moving every abstract driver to it's own module. -> ritchie
- Annotations for easy property (and element?) definitions. -> ritchie
- event handler directly attached to the properties -> ritchie
- driver extensions, to encapsulate and make reusable code -> ritchie
- Maven folder renaming -> Zerjillo
