package org.indilib.i4j.client.ui;

/*
 * #%L
 * INDI for Java Client UI Library
 * %%
 * Copyright (C) 2013 - 2014 indiforjava
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program. If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */

import java.awt.Dimension;
import java.awt.GridLayout;

import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import org.indilib.i4j.Constants.PropertyPermissions;
import org.indilib.i4j.client.INDIElement;
import org.indilib.i4j.client.INDITextElement;

/**
 * A panel to represent a <code>INDITextElement</code>.
 * 
 * @author S. Alonso (Zerjillo) [zerjioi at ugr.es]
 * @see INDITextElement
 */
public class INDITextElementPanel extends INDIElementPanel {

    /**
     * serial Version UID.
     */
    private static final long serialVersionUID = -7009154715953373264L;

    /**
     * the text element bihind the pannel.
     */
    private INDITextElement te;

    /**
     * Creates new form INDITextElementPanel.
     * 
     * @param te
     *            the text element bihind the pannel.
     * @param perm
     *            the permissions for the element.
     */
    public INDITextElementPanel(INDITextElement te, PropertyPermissions perm) {
        super(perm);

        initComponents();

        if (!isWritable()) {
            desiredValue.setVisible(false);
            ((GridLayout) mainPanel.getLayout()).setColumns(2);
            mainPanel.remove(desiredValue);
        }

        this.te = te;

        desiredValue.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                desiredValueChanged();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                desiredValueChanged();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                desiredValueChanged();
            }
        });

        updateElementData();
    }

    /**
     * check if the desired value was changed?
     */
    private void desiredValueChanged() {
        if (!(desiredValue.getText().length() == 0)) {
            setChanged(true);
        } else {
            setChanged(false);
        }

        checkSetButton();
    }

    /**
     * update the view acourding to the backing element.
     */
    private void updateElementData() {
        name.setText(te.getLabel());
        name.setToolTipText(te.getName());
        currentValue.setText((String) te.getValue());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        name = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        currentValue = new javax.swing.JTextField();
        desiredValue = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        setLayout(new java.awt.BorderLayout(5, 0));

        name.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        name.setMinimumSize(new java.awt.Dimension(100, 0));
        add(name, java.awt.BorderLayout.WEST);

        mainPanel.setLayout(new java.awt.GridLayout(1, 3, 5, 0));

        currentValue.setEditable(false);
        currentValue.setToolTipText("Current Value");
        currentValue.setMinimumSize(new java.awt.Dimension(4, 16));
        mainPanel.add(currentValue);

        desiredValue.setMinimumSize(new java.awt.Dimension(4, 16));
        mainPanel.add(desiredValue);

        add(mainPanel, java.awt.BorderLayout.CENTER);
    } // </editor-fold>//GEN-END:initComponents
      // Variables declaration - do not modify//GEN-BEGIN:variables

    private javax.swing.JTextField currentValue;

    private javax.swing.JTextField desiredValue;

    private javax.swing.JPanel mainPanel;

    private javax.swing.JLabel name;

    // End of variables declaration//GEN-END:variables

    @Override
    protected Object getDesiredValue() {
        return desiredValue.getText();
    }

    @Override
    protected INDITextElement getElement() {
        return te;
    }

    @Override
    protected void setError(boolean erroneous, String errorMessage) {
        // Does nothing, text elements cannot be erroneous
    }

    @Override
    protected boolean isDesiredValueErroneous() {
        return false; // Never erroneous
    }

    @Override
    protected void cleanDesiredValue() {
        desiredValue.setText("");
    }

    @Override
    public void elementChanged(INDIElement element) {
        if (element == te) {
            updateElementData();
        }
    }

    @Override
    protected int getNameSize() {
        return name.getWidth();
    }

    @Override
    protected void setNameSize(int size) {
        name.setPreferredSize(new Dimension(size, (int) (name.getPreferredSize().getHeight())));
    }
}
