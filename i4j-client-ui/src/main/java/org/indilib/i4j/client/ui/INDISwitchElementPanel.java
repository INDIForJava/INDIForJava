package org.indilib.i4j.client.ui;

/*
 * #%L
 * INDI for Java Client UI Library
 * %%
 * Copyright (C) 2013 - 2014 indiforjava
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program. If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;

import javax.swing.ButtonGroup;
import javax.swing.UIManager;

import org.indilib.i4j.Constants.PropertyPermissions;
import org.indilib.i4j.Constants.SwitchStatus;
import org.indilib.i4j.client.INDIElement;
import org.indilib.i4j.client.INDISwitchElement;

/**
 * A panel to represent a <code>INDISwitchElement</code>.
 * 
 * @author S. Alonso (Zerjillo) [zerjioi at ugr.es]
 * @version 1.36, November 18, 2013
 * @see INDISwitchElement
 */
public class INDISwitchElementPanel extends INDIElementPanel {

    /**
     * serial Version UID.
     */
    private static final long serialVersionUID = -8497570150829551662L;

    /**
     * the switch element behind the pannel.
     */
    private INDISwitchElement se;

    /**
     * Creates new form INDISwitchElementPanel.
     * 
     * @param se
     *            the switch element behind the pannel.
     * @param perm
     *            the permission for the element.
     */
    public INDISwitchElementPanel(INDISwitchElement se, PropertyPermissions perm) {
        super(perm);

        initComponents();

        if (!isWritable()) {
            desiredValue.setVisible(false);
            ((GridLayout) mainPanel.getLayout()).setColumns(2);
            mainPanel.remove(desiredValue);
        }

        this.se = se;

        updateElementDataInitial();
    }

    /**
     * set the button group.
     * 
     * @param buttonGroup
     *            the button group to set.
     */
    protected void setButtonGroup(ButtonGroup buttonGroup) {
        buttonGroup.add(desiredValue);
    }

    /**
     * update the initial data from the element.
     */
    private void updateElementDataInitial() {
        name.setText(se.getLabel());
        name.setToolTipText(se.getName());

        SwitchStatus ss = (SwitchStatus) se.getValue();

        if (ss == SwitchStatus.OFF) {
            currentValue.setText("");
            currentValue.setBackground(UIManager.getColor("Label.background"));
            desiredValue.setSelected(false);
        } else {
            currentValue.setText("SELECTED");
            currentValue.setBackground(Color.GREEN);
            desiredValue.setSelected(true);
        }
    }

    /**
     * update the view acrourding to the element.
     */
    private void updateElementData() {
        name.setText(se.getLabel());
        name.setToolTipText(se.getName());

        SwitchStatus ss = (SwitchStatus) se.getValue();

        if (ss == SwitchStatus.OFF) {
            currentValue.setText("");
            currentValue.setBackground(UIManager.getColor("Label.background"));
        } else {
            currentValue.setText("SELECTED");
            currentValue.setBackground(Color.GREEN);
        }
    }

    @Override
    protected boolean isChanged() {
        return true; // Always changed: all will be send
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        name = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        currentValue = new javax.swing.JTextField();
        desiredValue = new javax.swing.JToggleButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        setLayout(new java.awt.BorderLayout(5, 0));

        name.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        name.setMinimumSize(new java.awt.Dimension(100, 0));
        add(name, java.awt.BorderLayout.WEST);

        mainPanel.setLayout(new java.awt.GridLayout(1, 3, 5, 0));

        currentValue.setEditable(false);
        currentValue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        currentValue.setToolTipText("Current Value");
        currentValue.setMinimumSize(new java.awt.Dimension(4, 16));
        mainPanel.add(currentValue);

        desiredValue.setText("Select");
        desiredValue.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desiredValueActionPerformed(evt);
            }
        });
        mainPanel.add(desiredValue);

        add(mainPanel, java.awt.BorderLayout.CENTER);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * the desired action should be performed.
     * 
     * @param evt
     *            the event triggering the action.
     */
    private void desiredValueActionPerformed(java.awt.event.ActionEvent evt) { // GEN-FIRST:event_desiredValueActionPerformed
        setChanged(true);

        checkSetButton();
    } // GEN-LAST:event_desiredValueActionPerformed
      // Variables declaration - do not modify//GEN-BEGIN:variables

    private javax.swing.JTextField currentValue;

    private javax.swing.JToggleButton desiredValue;

    private javax.swing.JPanel mainPanel;

    private javax.swing.JLabel name;

    // End of variables declaration//GEN-END:variables

    @Override
    protected Object getDesiredValue() {
        if (desiredValue.isSelected()) {
            return SwitchStatus.ON;
        }

        return SwitchStatus.OFF;
    }

    @Override
    protected INDISwitchElement getElement() {
        return se;
    }

    @Override
    protected void setError(boolean erroneous, String errorMessage) {
        // A single switch element cannot be erroneous
    }

    @Override
    protected boolean isDesiredValueErroneous() {
        return false; // A single switch element cannot be erroneous
    }

    @Override
    protected void cleanDesiredValue() {
        // desiredValue.setSelected(false);
    }

    @Override
    public void elementChanged(INDIElement element) {
        if (element == se) {
            updateElementData();
        }
    }

    @Override
    protected int getNameSize() {
        return name.getWidth();
    }

    @Override
    protected void setNameSize(int size) {
        name.setPreferredSize(new Dimension(size, (int) (name.getPreferredSize().getHeight())));
    }
}
