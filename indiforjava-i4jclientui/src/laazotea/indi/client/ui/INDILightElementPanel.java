/*
 *  This file is part of INDI for Java Client UI.
 * 
 *  INDI for Java Client UI is free software: you can redistribute it
 *  and/or modify it under the terms of the GNU General Public License 
 *  as published by the Free Software Foundation, either version 3 of 
 *  the License, or (at your option) any later version.
 * 
 *  INDI for Java Client UI is distributed in the hope that it will be
 *  useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 *  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with INDI for Java Client UI.  If not, see 
 *  <http://www.gnu.org/licenses/>.
 */
package laazotea.indi.client.ui;

import laazotea.indi.Constants.LightStates;
import laazotea.indi.Constants.PropertyPermissions;
import laazotea.indi.client.INDIElement;
import laazotea.indi.client.INDILightElement;

/**
 * A panel to represent a <code>INDILightElement</code>.
 *
 * @author S. Alonso (Zerjillo) [zerjio at zerjio.com]
 * @version 1.3, April 9, 2012
 * @see INDILightElement
 */
public class INDILightElementPanel extends INDIElementPanel {

  INDILightElement le;
  private javax.swing.ImageIcon iconAlert = new javax.swing.ImageIcon(getClass().getResource("/laazotea/indi/client/ui/images/light_alert_big.png"));
  private javax.swing.ImageIcon iconIdle = new javax.swing.ImageIcon(getClass().getResource("/laazotea/indi/client/ui/images/light_idle_big.png"));
  private javax.swing.ImageIcon iconBusy = new javax.swing.ImageIcon(getClass().getResource("/laazotea/indi/client/ui/images/light_busy_big.png"));
  private javax.swing.ImageIcon iconOk = new javax.swing.ImageIcon(getClass().getResource("/laazotea/indi/client/ui/images/light_ok_big.png"));

  /**
   * Creates new form INDILightElementPanel
   */
  public INDILightElementPanel(INDILightElement le) {
    super(PropertyPermissions.RO);

    initComponents();

    this.le = le;
    
    updateElementData();
  }

  private void updateElementData() {
    name.setText(le.getLabel());
    name.setToolTipText(le.getName());
    
    LightStates s = (LightStates)le.getValue();
    
    if (s == LightStates.ALERT) {
      currentValue.setText("Alert");
      currentValue.setIcon(iconAlert);
    } else  if (s == LightStates.BUSY) {
      currentValue.setText("Busy");
      currentValue.setIcon(iconBusy);
    } else if (s == LightStates.OK) {
      currentValue.setText("Ok");
      currentValue.setIcon(iconOk);
    } else if (s == LightStates.IDLE) {
      currentValue.setText("Idle");
      currentValue.setIcon(iconIdle);
    }
  }



  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        name = new javax.swing.JLabel();
        currentValue = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        setLayout(new java.awt.BorderLayout());

        mainPanel.setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        name.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        mainPanel.add(name);

        currentValue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/laazotea/indi/client/ui/images/light_idle_big.png"))); // NOI18N
        mainPanel.add(currentValue);

        add(mainPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currentValue;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel name;
    // End of variables declaration//GEN-END:variables

  @Override
  protected Object getDesiredValue() {
    return null; // There is no desired value for a light
  }

  @Override
  protected INDILightElement getElement() {
    return le;
  }

  @Override
  protected void setError(boolean erroneous, String errorMessage) {
    // No thing to do, a light cannot be erroneous
  }

  @Override
  protected boolean isDesiredValueErroneous() {
    return false; // Cannot be erroneous
  }

  @Override
  protected void cleanDesiredValue() {
    // There is no desired value for a light
  }

  @Override
  public void elementChanged(INDIElement element) {
    if (element == le) {
      updateElementData();
    }
  }
}
